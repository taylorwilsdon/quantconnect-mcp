{
  "dxt_version": "0.1",
  "name": "quantconnect-mcp",
  "display_name": "QuantConnect MCP Server",
  "version": "0.3.0",
  "description": "QuantConnect platform integration with AI assistants for algorithmic trading project management, backtesting, and API access through MCP",
  "long_description": "An MCP server that provides AI assistants with access to QuantConnect's algorithmic trading platform. Features include project management, file management, backtesting, and authentication tools for quantitative finance.",
  "author": {
    "name": "Taylor Wilsdon",
    "email": "taylor@taylorwilsdon.com",
    "url": "https://taylorwilsdon.com"
  },
  "homepage": "https://github.com/taylorwilsdon/quantconnect-mcp",
  "documentation": "https://github.com/taylorwilsdon/quantconnect-mcp/blob/main/README.md",
  "support": "https://github.com/taylorwilsdon/quantconnect-mcp/issues",
  "server": {
    "type": "python",
    "entry_point": "quantconnect_mcp/__init__.py",
    "mcp_config": {
      "command": "uv",
      "args": [
        "run",
        "--directory",
        "${__dirname}",
        "quantconnect-mcp"
      ],
      "env": {
        "QUANTCONNECT_USER_ID": "${user_config.QUANTCONNECT_USER_ID}",
        "QUANTCONNECT_API_TOKEN": "${user_config.QUANTCONNECT_API_TOKEN}",
        "QUANTCONNECT_ORGANIZATION_ID": "${user_config.QUANTCONNECT_ORGANIZATION_ID}",
        "MCP_TRANSPORT": "${user_config.MCP_TRANSPORT}",
        "MCP_HOST": "${user_config.MCP_HOST}",
        "MCP_PORT": "${user_config.MCP_PORT}"
      }
    }
  },
  "tools": [
    {
      "name": "configure_quantconnect_auth",
      "description": "Configure QuantConnect API authentication credentials"
    },
    {
      "name": "validate_quantconnect_auth",
      "description": "Validate QuantConnect API credentials"
    },
    {
      "name": "get_auth_status",
      "description": "Check current authentication status"
    },
    {
      "name": "test_quantconnect_api",
      "description": "Test QuantConnect API connectivity"
    },
    {
      "name": "clear_quantconnect_auth",
      "description": "Clear stored authentication credentials"
    },
    {
      "name": "create_project",
      "description": "Create new algorithmic trading projects in QuantConnect"
    },
    {
      "name": "read_project",
      "description": "Get project details or list all projects"
    },
    {
      "name": "update_project",
      "description": "Update project name and description"
    },
    {
      "name": "compile_project",
      "description": "Compile a project for backtesting"
    },
    {
      "name": "read_compilation_result",
      "description": "Read the result of a compilation job"
    },
    {
      "name": "create_file",
      "description": "Create new files in QuantConnect projects"
    },
    {
      "name": "read_file",
      "description": "Read file content from QuantConnect projects"
    },
    {
      "name": "update_file_content",
      "description": "Update file content in QuantConnect projects"
    },
    {
      "name": "update_file_name",
      "description": "Rename files in QuantConnect projects"
    },
    {
      "name": "create_backtest",
      "description": "Create and run backtests for algorithmic trading strategies"
    },
    {
      "name": "read_backtest",
      "description": "Get backtest results and performance metrics"
    },
    {
      "name": "read_backtest_chart",
      "description": "Get backtest chart data"
    },
    {
      "name": "read_backtest_orders",
      "description": "Get backtest order history"
    },
    {
      "name": "read_backtest_insights",
      "description": "Get backtest insights and signals"
    }
  ],
  "user_config": {
    "QUANTCONNECT_USER_ID": {
      "type": "string",
      "title": "QuantConnect User ID",
      "description": "Your QuantConnect account user ID (numeric identifier)",
      "required": true,
      "sensitive": false
    },
    "QUANTCONNECT_API_TOKEN": {
      "type": "string",
      "title": "QuantConnect API Token",
      "description": "Your QuantConnect API token for authentication",
      "required": true,
      "sensitive": true
    },
    "QUANTCONNECT_ORGANIZATION_ID": {
      "type": "string",
      "title": "QuantConnect Organization ID",
      "description": "Organization ID for team accounts (optional for individual accounts)",
      "required": false,
      "sensitive": false
    },
    "MCP_TRANSPORT": {
      "type": "string",
      "title": "MCP Transport Method",
      "description": "Transport method for MCP communication (stdio, sse, or websocket)",
      "required": false,
      "sensitive": false,
      "default": "stdio"
    },
    "MCP_HOST": {
      "type": "string",
      "title": "MCP Host",
      "description": "Host address for MCP server (only required for sse/websocket transport)",
      "required": false,
      "sensitive": false,
      "default": "localhost"
    },
    "MCP_PORT": {
      "type": "number",
      "title": "MCP Port",
      "description": "Port number for MCP server (only required for sse/websocket transport)",
      "required": false,
      "sensitive": false,
      "default": 3000
    }
  },
  "keywords": [
    "quantconnect",
    "algorithmic-trading",
    "quantitative-finance",
    "mcp",
    "server",
    "backtesting",
    "trading-strategies",
    "api",
    "ai-assistant",
    "fintech"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/taylorwilsdon/quantconnect-mcp"
  }
}
